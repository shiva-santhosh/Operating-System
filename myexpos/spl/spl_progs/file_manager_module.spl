alias functionNum R1;
alias retVal R0;

if(functionNum == 2) then
	alias diskBlock R2;
	alias offset R3;
	alias physicalAddr R4;

	alias bufferNum R5;
	bufferNum = diskBlock%4;

	multipush(R1,R2,R3,R4,R5);
	R1 = 1;
	R2 = bufferNum;
	R3 = [SYSTEM_STATUS_TABLE + 1];
	call MOD_0;
	multipop(R1,R2,R3,R4,R5);

	if([BUFFER_TABLE + 4*bufferNum] != diskBlock) then
		if([BUFFER_TABLE + 4*bufferNum + 1]==1) then
			multipush(R1,R2,R3,R4,R5);
			R1 = 1;
			R2 = [SYSTEM_STATUS_TABLE + 1];
			R3 = 71 + bufferNum;
			R4 = [BUFFER_TABLE + 4*bufferNum];
			call MOD_4;
			multipop(R1,R2,R3,R4,R5);

			[BUFFER_TABLE + 4*bufferNum + 1] = 0;
		endif;

		multipush(R1,R2,R3,R4,R5);
		R1 = 2;
		R3 = 71 + bufferNum;
		R4 = diskBlock;
		R2 = [SYSTEM_STATUS_TABLE + 1];
		call MOD_4;
		multipop(R1,R2,R3,R4,R5);

		[BUFFER_TABLE + 4*bufferNum] = diskBlock;
	endif;

	[physicalAddr] = [(71 + bufferNum)*512 + offset];

	multipush(R1,R2,R3,R4,R5);
	R1 = 2;
	R2 = bufferNum;
	R3 = [SYSTEM_STATUS_TABLE + 1];
	call MOD_0;
	multipop(R1,R2,R3,R4,R5);

	return;
endif;

if( functionNum == 3) then
	alias filename R2;
	alias counter R3;
	counter = 0;
	
	while(counter < MAX_FILE_NUM) do
		if ( [INODE_TABLE + counter * 16 + 1] == filename) then
			break;
		endif;
		counter = counter +1;
	endwhile;
	
	if( counter == MAX_FILE_NUM) then
		retVal = -1;
		return;
	endif;
	
	multipush(R1, R2, R3);
	R1 = 4;
	R2 = counter;
	R3 = [SYSTEM_STATUS_TABLE + 1];
	call MOD_0;
	multipop(R1, R2, R3);
	
	if( retVal == -1) then
		return;
	endif;
	
	if( [INODE_TABLE + counter * 16] ==  EXEC) then
		multipush(R1, R2, R3);
		R1 = 5;
		R2 = counter;
		R3 = [SYSTEM_STATUS_TABLE + 1];
		call MOD_0;
		multipop(R1, R2, R3);
		
		retVal = -1;
		return ;
	endif;

	alias index R4;
	index = counter;
	
	counter = 0;
	
	while (counter < MAX_OPENFILE_NUM   && ([OPEN_FILE_TABLE + counter * 4 ] != -1)) do
		counter = counter + 1;
	endwhile;
	
	if (counter == MAX_OPENFILE_NUM) then
		multipush(R1, R2, R4);
		R1 = 5;
		R2 = index;
		R3 = [SYSTEM_STATUS_TABLE + 1];
		call MOD_0;
		multipop(R1, R2, R4);
		
		retVal = -2;
		return ;
	endif;
	
	alias openFile R5;
	alias fileTable R6;
	openFile =	OPEN_FILE_TABLE + counter * 4;
	fileTable = FILE_STATUS_TABLE + index * 4;
	if(filename == "root" ) then
		[openFile] = INODE_ROOT;
	else
		if([fileTable + 1] == -1) then
			[fileTable + 1] = 1;
		else
			[fileTable + 1] = [fileTable + 1] + 1;
		endif;
		[openFile] = index;
	endif;
	[openFile + 1] = 1;
	[openFile + 2] = 0;
	
	multipush(R1, R2, R4, R3);
		R1 = 5;
		R2 = index;
		R3 = [SYSTEM_STATUS_TABLE + 1];
		call MOD_0;
	multipop(R1, R2, R4, R3);
	
	R0 = counter; 
	return ;
endif;

if(functionNum == 4) then
	alias index R2;
	alias inode R3;
	alias openFile R4;
	openFile = OPEN_FILE_TABLE + index * 4;
	inode = [ openFile ];
	[openFile + 1] = [openFile + 1] - 1;
	if([openFile + 1] == 0) then
		if([openFile] != INODE_ROOT ) then
			alias fileTable R5;
			fileTable = FILE_STATUS_TABLE + inode * 4;
			[fileTable + 1] = [fileTable + 1] - 1;
			if([fileTable + 1] == 0) then
				[fileTable + 1] = -1;
			endif;
		endif;
		[openFile]    = -1;
		[openFile + 1] = -1;
		[openFile + 2] = -1;
	endif;
	return;
endif;
