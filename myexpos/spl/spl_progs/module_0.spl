alias functionNum R1;

if ( functionNum == 1) then
	alias buffer R2 ;
	alias PID R3 ;

	while ([BUFFER_TABLE+4*buffer + 2] != -1 )do
		[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+4]=WAIT_BUFFER;
		[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+5]=buffer;
		multipush(R0,R1,R2,R3);
		call MOD_5;
		multipop(R0,R1,R2,R3);
	endwhile ;
	[BUFFER_TABLE + 4*buffer + 2] = PID;
	return ;
endif ;

if ( functionNum == 2) then
	alias buffer R2 ;
	alias PID R3 ;

	if ( [BUFFER_TABLE + 4*buffer + 2] != PID ) then
		R0 = -1 ;
		return ;
	endif ;
	[BUFFER_TABLE + 4*buffer + 2] = -1 ;

	alias counter R4 ;
	counter = 0 ;

	while (counter < MAX_PROC_NUM)do
		if(([PROCESS_TABLE+counter*16+4] == WAIT_BUFFER) && ([PROCESS_TABLE+ counter*16+5] == buffer ))then
			[PROCESS_TABLE+ counter*16+4] = READY ;
		endif ;
		counter = counter + 1 ;
	endwhile ;
	R0 = 0 ;
	return ;
endif ;
if ( functionNum == 3) then
  alias currentPID R2;
  while([DISK_STATUS_TABLE] == 1 )do
    [PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1] * 16 + 4] = WAIT_DISK ;
    multipush(R0, R1, R2, R3);
    call MOD_5 ;
    multipop(R0, R1, R2, R3);
  endwhile;
  [DISK_STATUS_TABLE] = 1 ;
  [DISK_STATUS_TABLE+4] = currentPID ;
  return ;
endif ;

if(functionNum == 8) then
   alias currentPID R2;
   while([TERMINAL_STATUS_TABLE+0]==1) do
       [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+4]=WAIT_TERMINAL;
       multipush(R1,R2);
       call MOD_5;
       multipop(R1,R2);
   endwhile;
   [TERMINAL_STATUS_TABLE+0]=1;
   [TERMINAL_STATUS_TABLE+1]=currentPID;
   return;
  endif;

if(functionNum == 9) then
  alias currentPID R2;
  if(currentPID!=[TERMINAL_STATUS_TABLE+1]) then
     alias retVal R0;
     retVal = -1;
     return;
  else
      [TERMINAL_STATUS_TABLE+0]=0;
      alias counter R3;
      counter=0;
      while(counter<MAX_PROC_NUM) do
           if([PROCESS_TABLE+(counter)*16+4]==WAIT_TERMINAL) then
              [PROCESS_TABLE+(counter)*16+4]=READY;
           endif; 
      counter=counter+1;
      endwhile;
      alias retVal R0;
      retVal =0;
      return;
  endif;
endif;
if(functionNum == 6) then
	alias currentPID R2;
	alias counter R3;
	counter = 0;
	while(counter < MAX_SEM_COUNT) do
		if([SEMAPHORE_TABLE + 4*counter + 1] == 0) then
			break;
		endif;
		counter = counter+1;	
	endwhile;

	if(counter == MAX_SEM_COUNT) then
		R0 = -1;
		return;
	endif;

	[SEMAPHORE_TABLE + 4*counter + 1] = 1;
	[SEMAPHORE_TABLE + 4*counter + 0] = -1;

	R0 = counter;
	return;
endif;

if(functionNum == 7) then
	alias semTableIndex R2;
	alias currentPID R3;
	alias counter R4;
	
	if([SEMAPHORE_TABLE + 4*semTableIndex] == currentPID) then
		[SEMAPHORE_TABLE + 4*semTableIndex] = -1;
		counter = 0;
		while(counter < MAX_PROC_NUM) do
			if([PROCESS_TABLE + 16*counter + 4] == WAIT_SEMAPHORE && [PROCESS_TABLE + 16*counter + 5] == semTableIndex) then
				[PROCESS_TABLE + 16*counter + 4] = READY;	
			endif;
			counter = counter +1 ;
		endwhile;

	endif;

	[SEMAPHORE_TABLE + 4*semTableIndex +1] = [SEMAPHORE_TABLE + 4*semTableIndex +1]-1;
	return;
	
endif;
if (functionNum == 4) then
	alias inode R2 ;
	alias PID R3 ;
	while([FILE_STATUS_TABLE + inode*4] != -1 )do
		[PROCESS_TABLE + PID*16 + 4] = WAIT_FILE ;
		[PROCESS_TABLE + PID*16 + 5] = inode ;
		multipush(R2,R3) ;
		call MOD_5 ;
		multipush(R2,R3) ;
	endwhile;
	if ([INODE_TABLE + inode*16 + 1 ] == -1)then
		R0 = -1 ;
		return ;	
	endif;
	[FILE_STATUS_TABLE +inode*4 ] = PID ;
	R0 = 0 ;
	return ;
endif ;

if (functionNum == 5) then
	alias inode R2 ;
	alias PID R3 ;
	if (PID != [FILE_STATUS_TABLE + inode*4])then
		R0 = -1 ;
		return ;
	endif ;
	[FILE_STATUS_TABLE + inode*4] = -1 ;
	alias counter R4 ;
	counter = 0;
	while(counter < 16 ) do
		if ( [PROCESS_TABLE + counter *16 + 4 ] == WAIT_FILE  && [PROCESS_TABLE + counter *16 + 5 ] == inode )then
			[PROCESS_TABLE + counter *16 + 4 ] = READY ;	
		endif ;
		counter = counter + 1;
	endwhile; 
	R0 = 0 ;
	return ;
endif ;
