alias userSP R7;
userSP = SP;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 +13] = SP;
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 11]*512 - 1;

alias currentPID R2;
currentPID = [SYSTEM_STATUS_TABLE+1];

alias syscall R3;
syscall = [[PTBR + 2*((userSP-5)/512)]*512 + (userSP-5)%512];


if(syscall == 19) then
	[PROCESS_TABLE + currentPID*16 + 9] = 19;
	alias semDesc R4;
	semDesc = [[PTBR + 2*((userSP-4)/512)]*512 + (userSP-4)%512];
	if(semDesc <0 || semDesc > 7 || [[PROCESS_TABLE + 16 * currentPID +11]*512 + 512 -16 + 2*semDesc] != 1) then
		[[PTBR + 2*((userSP-1)/512)]*512 + (userSP-1)%512] = -1;
		[PROCESS_TABLE + currentPID*16 + 9] = 0;
		SP = [PROCESS_TABLE + currentPID*16 + 13];
		ireturn;
	endif;
	alias Semindex R5;
	Semindex = [[PROCESS_TABLE + 16 * currentPID + 11] * 512 + 512 - 16 + 2 * semDesc + 1];
	while ([SEMAPHORE_TABLE + 4 * Semindex] != -1 && [SEMAPHORE_TABLE + 4 * Semindex] != currentPID) do
		[PROCESS_TABLE + 16 * currentPID + 4] = WAIT_SEMAPHORE;
		[PROCESS_TABLE + 16 * currentPID + 5] = Semindex;
		multipush(R1,R2,R3,R4,R5,R7);
		call MOD_5;
		multipop(R1,R2,R3,R4,R5,R7);
	endwhile;
	[SEMAPHORE_TABLE + 4 * Semindex] = currentPID;
	[[PTBR + 2 * ((userSP - 1) / 512)] * 512 + (userSP - 1) % 512] = 0;
	[PROCESS_TABLE + currentPID*16 + 9] = 0;
	SP = [PROCESS_TABLE + currentPID*16 + 13];
	ireturn;
endif;

if(syscall == 20) then
	[PROCESS_TABLE + currentPID*16 + 9] = 20;
	alias semDesc R4;
	semDesc = [[PTBR + 2*((userSP-4)/512)]*512 + (userSP-4)%512];
	if(semDesc <0 || semDesc > 7 || [[PROCESS_TABLE + 16 * currentPID +11]*512 + 512 -16 + 2*semDesc] != 1) then
		[[PTBR + 2*((userSP-1)/512)]*512 + (userSP-1)%512] = -1;
		[PROCESS_TABLE + currentPID*16 + 9] = 0;
		SP = [PROCESS_TABLE + currentPID*16 + 13];
		ireturn;
	endif;
	alias Semindex R5;
	Semindex = [[PROCESS_TABLE + 16 * currentPID + 11] * 512 + 512 - 16 + 2 * semDesc + 1];
	if ([SEMAPHORE_TABLE + 4 * Semindex] != -1) then
		if ([SEMAPHORE_TABLE + 4 * Semindex] != currentPID) then
			[[PTBR + 2 * ((userSP - 1) / 512)] * 512 + (userSP - 1) % 512] = -2;
			[PROCESS_TABLE + currentPID * 16 + 9] = 0;
			SP = [PROCESS_TABLE + currentPID * 16 + 13];
			ireturn;
		endif;
		[SEMAPHORE_TABLE + 4 * Semindex] = -1;
		alias counter R6;
		counter = 0; 
		while (counter < MAX_PROC_NUM) do
			if ([PROCESS_TABLE + 16 * counter + 4] == WAIT_SEMAPHORE && [PROCESS_TABLE + 16 * counter + 5] == Semindex) then
				[PROCESS_TABLE + 16 * counter + 4] = READY;
			endif;
			counter = counter + 1;
		endwhile;
	endif;
	[[PTBR + 2 * ((userSP - 1) / 512)] * 512 + (userSP - 1) % 512] = 0;
	[PROCESS_TABLE + currentPID*16 + 9] = 0;
	SP = [PROCESS_TABLE + currentPID*16 + 13];
	ireturn;
endif;

